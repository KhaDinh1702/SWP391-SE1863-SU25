import { useState, useEffect } from 'react';
import { FaBell, FaPills, FaCalendarAlt, FaClock, FaArrowLeft, FaWifi, FaExclamationTriangle } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom';
import { authService } from "../../services/authService";
import { appointmentService } from "../../services/appointmentService";
import { patientTreatmentProtocolService } from "../../services/patientTreatmentProtocolService";
import { patientService } from "../../services/patientService";
import { useNotification } from '../../contexts/NotificationContext';

// Trang th√¥ng b√°o cho b·ªánh nh√¢n
// Hi·ªÉn th·ªã nh·∫Øc nh·ªü u·ªëng thu·ªëc v√† l·ªãch h·∫πn s·∫Øp t·ªõi
// S·ª≠ d·ª•ng API th·ª±c t·ª´ backend:
// - Nh·∫Øc u·ªëng thu·ªëc: /api/Reminder/upcomingReminderForDrinkMedicine?userId={userId}
// - L·ªãch h·∫πn: appointmentService.getAllAppointments() -> filter theo patientId/userId -> l·∫•y appointmentId
// - Fallback v·ªÅ d·ªØ li·ªáu m·∫´u n·∫øu API kh√¥ng c√≥ d·ªØ li·ªáu

export default function Notifications() {
  const [reminders, setReminders] = useState([]);
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  
  // S·ª≠ d·ª•ng SignalR context
  const { notifications, unreadCount, isConnected, markAsRead, addTestNotification } = useNotification();

  useEffect(() => {
    fetchNotifications();
    
    // Request notification permission
    if (Notification.permission === 'default') {
      Notification.requestPermission();
    }
  }, []);

  // K·∫øt h·ª£p real-time notifications v·ªõi static data
  useEffect(() => {
    // Filter real-time notifications by type
    const medicationNotifications = notifications.filter(n => n.type === 'medication');
    const appointmentNotifications = notifications.filter(n => n.type === 'appointment');
    
    // Merge v·ªõi d·ªØ li·ªáu hi·ªán c√≥
    if (medicationNotifications.length > 0) {
      const newReminders = medicationNotifications.map(notif => ({
        id: notif.id,
        medicineName: notif.data?.medicineName || notif.title,
        reminderTime: notif.data?.reminderTime || notif.timestamp,
        dosage: notif.data?.dosage || "Theo ƒë∆°n thu·ªëc c·ªßa b√°c sƒ©",
        note: notif.message,
        displayTitle: notif.title,
        displayDescription: notif.message,
        isRealTime: true,
        isRead: notif.isRead
      }));
      
      setReminders(prev => {
        // Merge v√† remove duplicates
        const merged = [...newReminders, ...prev.filter(r => !r.isRealTime)];
        return merged.sort((a, b) => new Date(a.reminderTime) - new Date(b.reminderTime));
      });
    }

    if (appointmentNotifications.length > 0) {
      const newAppointments = appointmentNotifications.map(notif => ({
        appointmentId: notif.id,
        reason: notif.data?.reason || notif.title,
        appointmentDate: notif.data?.appointmentDate || notif.timestamp,
        doctorName: notif.data?.doctorName || 'B√°c sƒ©',
        location: notif.data?.location || 'Ph√≤ng kh√°m',
        notes: notif.message,
        isRealTime: true,
        isRead: notif.isRead
      }));
      
      setAppointments(prev => {
        const merged = [...newAppointments, ...prev.filter(a => !a.isRealTime)];
        return merged.sort((a, b) => new Date(a.appointmentDate) - new Date(b.appointmentDate));
      });
    }
  }, [notifications]);

  const handleMarkAsRead = async (notificationId) => {
    await markAsRead(notificationId);
  };

  const fetchNotifications = async () => {
    setLoading(true);
    const currentUser = authService.getCurrentUser();
    if (currentUser) {
      try {
        // L·∫•y th√¥ng tin b·ªánh nh√¢n ƒë·ªÉ c√≥ patientId
        const userResponse = await fetch(`https://localhost:7040/api/User/get-by-id?userId=${currentUser.userId}`, {
          headers: {
            'Authorization': `Bearer ${currentUser.token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (!userResponse.ok) {
          throw new Error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
        }
        
        const userData = await userResponse.json();
        console.log(`Starting to fetch notifications for user: ${currentUser.userId}`);
        
        // L·∫•y nh·∫Øc nh·ªü u·ªëng thu·ªëc t·ª´ API th·∫≠t
        let treatmentReminders = [];
        try {
          const reminderResponse = await fetch(`https://localhost:7040/api/Reminder/upcomingReminderForDrinkMedicine?userId=${currentUser.userId}`, {
            headers: {
              'Authorization': `Bearer ${currentUser.token}`,
              'Content-Type': 'application/json'
            }
          });
          
          if (reminderResponse.ok) {
            const remindersData = await reminderResponse.json();
            console.log(`üìã Found ${remindersData?.length || 0} medicine reminders`);
            
            treatmentReminders = (remindersData || []).map((reminder, index) => {
              // T·∫°o unique ID b·∫±ng c√°ch k·∫øt h·ª£p stageId, protocolId v√† reminderDateTime
              const uniqueId = `${reminder.stageId || 'unknown'}-${reminder.patientTreatmentProtocolId || 'no-protocol'}-${reminder.reminderDateTime || index}`;
              
              // X·ª≠ l√Ω t√™n thu·ªëc
              let medicineName = reminder.medicine || reminder.stageName || 'ƒêi·ªÅu tr·ªã HIV';
              if (reminder.medicine && reminder.stageName) {
                medicineName = `${reminder.medicine} (${reminder.stageName})`;
              }
              
              return {
                id: uniqueId,
                medicineName: medicineName,
                reminderTime: reminder.reminderDateTime,
                dosage: "Theo ƒë∆°n thu·ªëc c·ªßa b√°c sƒ©",
                note: reminder.description || 'Giai ƒëo·∫°n ƒëi·ªÅu tr·ªã',
                stageInfo: `Giai ƒëo·∫°n ${reminder.stageNumber || 1}`,
                stageId: reminder.stageId,
                protocolId: reminder.patientTreatmentProtocolId,
                medicine: reminder.medicine, // L∆∞u ri√™ng field medicine
                // Th√™m th√¥ng tin ƒë·ªÉ hi·ªÉn th·ªã
                displayTitle: reminder.medicine ? 
                  `${reminder.medicine} - ${reminder.stageName || `Giai ƒëo·∫°n ${reminder.stageNumber || 1}`}` :
                  `${reminder.stageName || 'ƒêi·ªÅu tr·ªã HIV'} - Giai ƒëo·∫°n ${reminder.stageNumber || 1}`,
                displayDescription: reminder.description || 'Nh·∫Øc nh·ªü u·ªëng thu·ªëc theo ƒë√∫ng l·ªãch tr√¨nh ƒëi·ªÅu tr·ªã'
              };
            });
            
            // üî• Group reminders theo ng√†y v√† ch·ªâ l·∫•y 7 ng√†y ti·∫øp theo
            const groupedByDate = {};
            const now = new Date();
            const next7Days = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
            
            treatmentReminders.forEach(reminder => {
              const reminderDate = new Date(reminder.reminderTime);
              
              // Ch·ªâ l·∫•y reminders trong 7 ng√†y t·ªõi
              if (reminderDate >= now && reminderDate <= next7Days) {
                const dateKey = reminderDate.toDateString(); // Tue Jul 02 2025
                
                if (!groupedByDate[dateKey]) {
                  groupedByDate[dateKey] = {
                    date: dateKey,
                    dateObj: reminderDate,
                    reminders: []
                  };
                }
                groupedByDate[dateKey].reminders.push(reminder);
              }
            });
            
            // Chuy·ªÉn th√†nh array v√† sort theo ng√†y
            const dailyReminders = Object.values(groupedByDate)
              .sort((a, b) => a.dateObj - b.dateObj)
              .map(day => ({
                ...day,
                // Ch·ªâ l·∫•y reminder s·ªõm nh·∫•t trong ng√†y ƒë·ªÉ hi·ªÉn th·ªã
                primaryReminder: day.reminders.sort((a, b) => new Date(a.reminderTime) - new Date(b.reminderTime))[0],
                totalCount: day.reminders.length
              }));
            
            console.log(`üìÖ Processed ${dailyReminders.length} days of reminders`);
            
            // S·ª≠ d·ª•ng daily reminders thay v√¨ t·∫•t c·∫£ reminders
            treatmentReminders = dailyReminders.map(day => ({
              ...day.primaryReminder,
              displayTitle: `${day.primaryReminder.displayTitle}${day.totalCount > 1 ? ` (+${day.totalCount - 1} l·∫ßn kh√°c)` : ''}`,
              dailyCount: day.totalCount,
              allRemindersInDay: day.reminders
            }));
            
            console.log(`‚úÖ Processed ${treatmentReminders.length} treatment reminders`);
          }
        } catch (reminderError) {
          console.error('Error fetching medicine reminders:', reminderError);
        }
        
        // L·∫•y l·ªãch h·∫πn s·∫Øp t·ªõi t·ª´ API th·∫≠t
        let upcomingAppointments = [];
        try {
          // S·ª≠ d·ª•ng getAllAppointments ƒë·ªÉ l·∫•y t·∫•t c·∫£ appointments
          const allAppointments = await appointmentService.getAllAppointments();
          console.log(`üìÖ Found ${allAppointments?.length || 0} total appointments`);
          
          // Filter appointments c·ªßa user hi·ªán t·∫°i v·ªõi nhi·ªÅu c√°ch th·ª≠
          const userAppointments = (allAppointments || []).filter(apt => {
            // Th·ª≠ match v·ªõi nhi·ªÅu field c√≥ th·ªÉ c√≥
            const isMatch = apt.patientId === currentUser.userId || 
                           apt.userId === currentUser.userId ||
                           apt.patientId === userData.patientId ||
                           apt.userId === userData.id ||
                           apt.patientId === userData.id ||
                           apt.userId === userData.patientId ||
                           // Th√™m c√°c c√°ch match kh√°c
                           String(apt.patientId) === String(currentUser.userId) ||
                           String(apt.userId) === String(currentUser.userId) ||
                           String(apt.patientId) === String(userData.id) ||
                           String(apt.userId) === String(userData.id);
                           
            return isMatch;
          });
          
          console.log(`üìã Found ${userAppointments.length} appointments for current user`);
          
          // N·∫øu kh√¥ng c√≥ appointments n√†o match, log ƒë·ªÉ debug
          if (userAppointments.length === 0) {
            console.log('‚ö†Ô∏è No appointments matched current user');
          }
          
          // L·ªçc l·ªãch h·∫πn s·∫Øp t·ªõi (trong v√≤ng 30 ng√†y)
          const now = new Date();
          const in30Days = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);
          
          upcomingAppointments = userAppointments
            .filter(apt => {
              const aptDate = new Date(apt.appointmentDate || apt.appointmentStartDate);
              const isUpcoming = aptDate >= now && aptDate <= in30Days;
              return isUpcoming;
            })
            .sort((a, b) => new Date(a.appointmentDate || a.appointmentStartDate) - new Date(b.appointmentDate || b.appointmentStartDate))
            .map(appointment => ({
              reason: appointment.reason || appointment.appointmentTitle || appointment.title || 'Cu·ªôc h·∫πn kh√°m',
              appointmentDate: appointment.appointmentDate || appointment.appointmentStartDate,
              doctorName: appointment.doctorName || 
                         (appointment.doctor && typeof appointment.doctor === 'object' 
                           ? (appointment.doctor.fullName || appointment.doctor.name || `${appointment.doctor.firstName || ''} ${appointment.doctor.lastName || ''}`.trim())
                           : appointment.doctor) || 
                         'B√°c sƒ©',
              location: appointment.location || (appointment.onlineLink ? 'Kh√°m online' : 'Ph√≤ng kh√°m'),
              notes: appointment.notes || appointment.reminderMessage || 'Nh·ªõ ƒë·∫øn ƒë√∫ng gi·ªù',
              appointmentId: appointment.appointmentId || appointment.id,
              onlineLink: appointment.onlineLink,
              status: appointment.status
            }));
            
          console.log(`‚úÖ Found ${upcomingAppointments.length} upcoming appointments`);
          
        } catch (appointmentError) {
          console.error('Error fetching appointments:', appointmentError);
          
          // Fallback: th·ª≠ g·ªçi endpoint upcomingAppointment n·∫øu getAllAppointments fail
          try {
            const appointmentResponse = await fetch(`https://localhost:7040/api/Appointment/upcomingAppointment?userId=${currentUser.userId}`, {
              headers: {
                'Authorization': `Bearer ${currentUser.token}`,
                'Content-Type': 'application/json'
              }
            });
            
            if (appointmentResponse.ok) {
              const appointmentsData = await appointmentResponse.json();
              console.log(`üìÖ Fallback: Found ${appointmentsData?.length || 0} appointments`);
              
              upcomingAppointments = (appointmentsData || []).map(appointment => ({
                reason: appointment.appointmentTitle || 'Cu·ªôc h·∫πn kh√°m',
                appointmentDate: appointment.appointmentStartDate,
                doctorName: appointment.doctorName,
                location: appointment.onlineLink ? 'Kh√°m online' : 'Ph√≤ng kh√°m',
                notes: appointment.reminderMessage || 'Nh·ªõ ƒë·∫øn ƒë√∫ng gi·ªù',
                appointmentId: appointment.appointmentId,
                onlineLink: appointment.onlineLink
              }));
            }
          } catch (fallbackError) {
            console.warn('Both appointment APIs failed:', fallbackError);
          }
        }
        
        // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c, d√πng d·ªØ li·ªáu m·∫´u
        if (treatmentReminders.length === 0) {
          console.log('üìã Using sample reminder data');
          treatmentReminders = [
            {
              id: `sample-reminder-1-${Date.now()}`,
              medicineName: "Efavirenz + Tenofovir + Emtricitabine",
              reminderTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(),
              dosage: "Theo ƒë∆°n thu·ªëc c·ªßa b√°c sƒ©",
              note: "Giai ƒëo·∫°n ƒëi·ªÅu tr·ªã HIV 1",
              stageInfo: "Giai ƒëo·∫°n 1",
              medicine: "Efavirenz + Tenofovir + Emtricitabine",
              displayTitle: "Efavirenz + Tenofovir + Emtricitabine - Giai ƒëo·∫°n 1",
              displayDescription: "Giai ƒëo·∫°n ƒëi·ªÅu tr·ªã HIV 1"
            },
            {
              id: `sample-reminder-2-${Date.now() + 1}`, 
              medicineName: "Dolutegravir + Tenofovir alafenamide + Emtricitabine",
              reminderTime: new Date(Date.now() + 8 * 60 * 60 * 1000).toISOString(),
              dosage: "Theo ƒë∆°n thu·ªëc c·ªßa b√°c sƒ©",
              note: "ƒêi·ªÅu tr·ªã ARV theo giai ƒëo·∫°n",
              stageInfo: "Giai ƒëo·∫°n 2",
              medicine: "Dolutegravir + Tenofovir alafenamide + Emtricitabine",
              displayTitle: "Dolutegravir + Tenofovir alafenamide + Emtricitabine - Giai ƒëo·∫°n 2",
              displayDescription: "Nh·∫Øc nh·ªü u·ªëng thu·ªëc theo ƒë√∫ng l·ªãch tr√¨nh ƒëi·ªÅu tr·ªã"
            }
          ];
        }
        
        if (upcomingAppointments.length === 0) {
          console.log('üìÖ Using sample appointment data');
          upcomingAppointments = [
            {
              reason: "Kh√°m ƒë·ªãnh k·ª≥ theo d√µi HIV",
              appointmentDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
              doctorName: "BS. Nguy·ªÖn VƒÉn A", 
              location: "Ph√≤ng kh√°m s·ªë 1 - T·∫ßng 2",
              notes: "Reminder: Your appointment is scheduled for tomorrow at 9:00 AM."
            }
          ];
        }
        
        setReminders(treatmentReminders);
        setAppointments(upcomingAppointments);
        
        console.log(`‚úÖ Notifications loaded successfully:`);
        console.log(`üìã Medicine reminders: ${treatmentReminders.length} items`);
        console.log(`üìÖ Upcoming appointments: ${upcomingAppointments.length} items`);
        
      } catch (error) {
        console.error('Error fetching notifications:', error);
        // Fallback to sample data on error
        setReminders([
          {
            medicineName: "Giai ƒëo·∫°n 1 - ƒêi·ªÅu tr·ªã HIV kh·ªüi ƒë·∫ßu",
            reminderTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(),
            dosage: "Theo ƒë∆°n thu·ªëc",
            note: "Giai ƒëo·∫°n 1 - ƒêi·ªÅu tr·ªã HIV kh·ªüi ƒë·∫ßu"
          }
        ]);
        setAppointments([
          {
            reason: "Kh√°m b·ªánh",
            appointmentDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
            doctorName: "BS. Ph·∫°m Thanh Hi·∫øu", 
            location: "Ph√≤ng kh√°m",
            notes: "Reminder: Your appointment is scheduled for tomorrow at 9:00 AM."
          }
        ]);
      }
    }
    setLoading(false);
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'Kh√¥ng x√°c ƒë·ªãnh';
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffHours = Math.round(diffTime / (1000 * 60 * 60));
    const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24));

    // N·∫øu trong v√≤ng 24 gi·ªù t·ªõi, hi·ªÉn th·ªã "trong X gi·ªù"
    if (diffHours >= 0 && diffHours < 24) {
      if (diffHours === 0) {
        const diffMinutes = Math.round(diffTime / (1000 * 60));
        if (diffMinutes <= 0) return 'Ngay b√¢y gi·ªù';
        return `Trong ${diffMinutes} ph√∫t`;
      }
      return `Trong ${diffHours} gi·ªù`;
    }
    
    // N·∫øu trong v√≤ng 7 ng√†y t·ªõi, hi·ªÉn th·ªã "trong X ng√†y"
    if (diffDays >= 1 && diffDays <= 7) {
      return `Trong ${diffDays} ng√†y`;
    }

    // C√≤n l·∫°i hi·ªÉn th·ªã ng√†y gi·ªù ƒë·∫ßy ƒë·ªß
    return date.toLocaleString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getUrgencyInfo = (dateString) => {
    if (!dateString) return { level: 'normal', color: 'bg-gray-500', text: 'B√¨nh th∆∞·ªùng' };
    
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffHours = Math.round(diffTime / (1000 * 60 * 60));
    
    if (diffHours <= 1) {
      return { level: 'urgent', color: 'bg-red-500', text: 'Kh·∫©n c·∫•p' };
    } else if (diffHours <= 6) {
      return { level: 'important', color: 'bg-orange-500', text: 'Quan tr·ªçng' };
    } else if (diffHours <= 24) {
      return { level: 'normal', color: 'bg-[#3B9AB8]', text: 'S·∫Øp t·ªõi' };
    } else {
      return { level: 'planned', color: 'bg-gray-500', text: 'ƒê√£ l√™n l·ªãch' };
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="mb-8">
          <button
            onClick={() => navigate(-1)}
            className="flex items-center gap-2 text-[#3B9AB8] hover:text-[#2d7a94] mb-4"
          >
            <FaArrowLeft />
            <span>Quay l·∫°i</span>
          </button>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <FaBell className="text-[#3B9AB8] text-2xl" />
              <h1 className="text-3xl font-bold text-gray-800">Th√¥ng b√°o</h1>
              {unreadCount > 0 && (
                <span className="bg-red-500 text-white text-sm px-2 py-1 rounded-full">
                  {unreadCount}
                </span>
              )}
            </div>
            
            {/* Connection status indicator */}
            <div className={`flex items-center gap-2 px-3 py-1 rounded-full text-sm ${
              isConnected ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
            }`}>
              {isConnected ? <FaWifi /> : <FaExclamationTriangle />}
              <span>{isConnected ? 'K·∫øt n·ªëi' : 'M·∫•t k·∫øt n·ªëi'}</span>
            </div>
          </div>
          <p className="text-gray-600 mt-2">
            Xem c√°c nh·∫Øc nh·ªü u·ªëng thu·ªëc v√† l·ªãch h·∫πn s·∫Øp t·ªõi
            {isConnected && <span className="text-green-600"> ‚Ä¢ C·∫≠p nh·∫≠t tr·ª±c ti·∫øp</span>}
          </p>
          
          {/* Debug info - ch·ªâ hi·ªÉn th·ªã khi ƒëang development */}
          {process.env.NODE_ENV === 'development' && (
            <div className="mt-4 p-3 bg-gray-100 rounded-lg text-sm">
              <p><strong>Debug Info:</strong></p>
              <p>SignalR Connected: {isConnected ? '‚úÖ' : '‚ùå'}</p>
              <p>Real-time Notifications: {notifications.length}</p>
              <p>Unread Count: {unreadCount}</p>
              <p>Read Notifications: {notifications.filter(n => n.isRead).length}</p>
              <p>Unread Notifications: {notifications.filter(n => !n.isRead).length}</p>
              <p>Backend Hub: /reminderHub</p>
              
              {/* Test buttons */}
              <div className="mt-3 space-x-2">
                <button 
                  onClick={() => addTestNotification('medication')}
                  className="px-3 py-1 bg-blue-500 text-white rounded text-xs hover:bg-blue-600"
                >
                  Test Medication
                </button>
                <button 
                  onClick={() => addTestNotification('appointment')}
                  className="px-3 py-1 bg-green-500 text-white rounded text-xs hover:bg-green-600"
                >
                  Test Appointment
                </button>
                <button 
                  onClick={() => addTestNotification('treatment')}
                  className="px-3 py-1 bg-purple-500 text-white rounded text-xs hover:bg-purple-600"
                >
                  Test Treatment
                </button>
              </div>
              
              {/* Mark all as read button */}
              <div className="mt-2">
                <button 
                  onClick={() => {
                    notifications.forEach(notif => {
                      if (!notif.isRead) {
                        handleMarkAsRead(notif.id);
                      }
                    });
                  }}
                  className="px-3 py-1 bg-gray-500 text-white rounded text-xs hover:bg-gray-600"
                >
                  Mark All as Read
                </button>
              </div>
            </div>
          )}
        </div>

        {loading ? (
          <div className="flex justify-center items-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#3B9AB8]"></div>
          </div>
        ) : (
          <div className="space-y-8">
            {/* Nh·∫Øc u·ªëng thu·ªëc */}
            <div className="bg-white rounded-lg shadow-md">
              <div className="p-6 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <FaPills className="text-[#3B9AB8] text-xl" />
                    <h2 className="text-xl font-semibold text-gray-800">Nh·∫Øc u·ªëng thu·ªëc</h2>
                  </div>
                  {reminders.length > 0 && (
                    <span className="bg-[#3B9AB8] text-white text-sm px-3 py-1 rounded-full">
                      {reminders.length} nh·∫Øc nh·ªü
                    </span>
                  )}
                </div>
              </div>
              <div className="p-6">
                {reminders.length === 0 ? (
                  <div className="text-center py-8">
                    <FaPills className="text-gray-300 text-4xl mx-auto mb-4" />
                    <p className="text-gray-500">Kh√¥ng c√≥ nh·∫Øc nh·ªü u·ªëng thu·ªëc n√†o</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {reminders.map((reminder, index) => {
                      const urgency = getUrgencyInfo(reminder.reminderTime || reminder.dateTime);
                      return (
                      <div key={reminder.id || index} className={`border rounded-lg p-4 hover:bg-gray-50 transition-colors cursor-pointer ${
                        urgency.level === 'urgent' ? 'border-red-200 bg-red-50' : 
                        urgency.level === 'important' ? 'border-orange-200 bg-orange-50' : 
                        'border-gray-200'
                      } ${
                        reminder.isRealTime && !reminder.isRead ? 'ring-2 ring-blue-300' : ''
                      } ${
                        reminder.isRead ? 'opacity-60 bg-gray-50' : 'bg-white'
                      }`}
                      onClick={() => reminder.isRealTime && !reminder.isRead && handleMarkAsRead(reminder.id)}
                      title={reminder.isRead ? 'ƒê√£ ƒë·ªçc' : 'Click ƒë·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc'}
                      >
                        <div className="flex items-start gap-4">
                          <div className={`w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0 ${
                            urgency.level === 'urgent' ? 'bg-red-100' :
                            urgency.level === 'important' ? 'bg-orange-100' :
                            'bg-[#3B9AB8]/20'
                          }`}>
                            <FaPills className={`text-lg ${
                              urgency.level === 'urgent' ? 'text-red-600' :
                              urgency.level === 'important' ? 'text-orange-600' :
                              'text-[#3B9AB8]'
                            }`} />
                          </div>
                          <div className="flex-1">
                            <div className="flex items-start justify-between mb-2">
                              <h3 className="font-semibold text-gray-800 text-lg flex items-center gap-2">
                                {reminder.displayTitle || reminder.medicineName || 'Nh·∫Øc u·ªëng thu·ªëc'}
                                {reminder.isRealTime && (
                                  <span className={`text-xs px-2 py-1 rounded ${
                                    reminder.isRead ? 'bg-gray-100 text-gray-500' : 'bg-blue-100 text-blue-700'
                                  }`}>
                                    {reminder.isRead ? 'ƒê√£ ƒë·ªçc' : 'M·ªõi'}
                                  </span>
                                )}
                                {!reminder.isRealTime && reminder.isRead && (
                                  <span className="text-xs bg-gray-100 text-gray-500 px-2 py-1 rounded">
                                    ƒê√£ ƒë·ªçc
                                  </span>
                                )}
                              </h3>
                              <div className="flex gap-2 ml-2">
                                <span className={`${urgency.color} text-white text-xs px-2 py-1 rounded-full flex-shrink-0`}>
                                  {urgency.text}
                                </span>
                                {reminder.stageInfo && (
                                  <span className="bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded-full flex-shrink-0">
                                    {reminder.stageInfo}
                                  </span>
                                )}
                              </div>
                            </div>
                            
                            <div className="flex items-center gap-2 text-sm text-gray-600 mb-3">
                              <FaClock className={urgency.level === 'urgent' ? 'text-red-500' : urgency.level === 'important' ? 'text-orange-500' : 'text-[#3B9AB8]'} />
                              <span className="font-medium">{formatDate(reminder.reminderTime || reminder.dateTime)}</span>
                            </div>
                            
                            {reminder.displayDescription && (
                              <p className={`text-sm text-gray-700 mb-2 p-2 rounded border-l-4 ${
                                urgency.level === 'urgent' ? 'bg-red-50 border-red-500' :
                                urgency.level === 'important' ? 'bg-orange-50 border-orange-500' :
                                'bg-blue-50 border-[#3B9AB8]'
                              }`}>
                                {reminder.displayDescription}
                              </p>
                            )}
                            
                            {/* Hi·ªÉn th·ªã th√¥ng tin v·ªÅ s·ªë l·∫ßn u·ªëng trong ng√†y */}
                            {reminder.dailyCount && reminder.dailyCount > 1 && (
                              <div className="mb-2">
                                <p className="text-sm text-blue-600 bg-blue-50 p-2 rounded">
                                  üìã C√≥ {reminder.dailyCount} l·∫ßn u·ªëng thu·ªëc trong ng√†y n√†y
                                </p>
                              </div>
                            )}
                            
                            <div className="flex flex-col gap-1">
                              {reminder.medicine && (
                                <p className="text-sm text-gray-600">
                                  <span className="font-medium text-gray-700">üíä Thu·ªëc:</span> {reminder.medicine}
                                </p>
                              )}
                              {reminder.dosage && (
                                <p className="text-sm text-gray-600">
                                  <span className="font-medium text-gray-700">ÔøΩ Li·ªÅu l∆∞·ª£ng:</span> {reminder.dosage}
                                </p>
                              )}
                              {reminder.note && reminder.note !== reminder.displayDescription && (
                                <p className="text-sm text-gray-600">
                                  <span className="font-medium text-gray-700">üìù Ghi ch√∫:</span> {reminder.note}
                                </p>
                              )}
                              {reminder.dailyCount && reminder.dailyCount > 1 && (
                                <p className="text-sm text-gray-500">
                                  <span className="font-medium text-gray-700">‚è∞ L·ªãch u·ªëng:</span> Xem chi ti·∫øt {reminder.dailyCount} l·∫ßn trong ng√†y
                                </p>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                      );
                    })}
                  </div>
                )}
              </div>
            </div>

            {/* L·ªãch h·∫πn s·∫Øp t·ªõi */}
            <div className="bg-white rounded-lg shadow-md">
              <div className="p-6 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <FaCalendarAlt className="text-[#3B9AB8] text-xl" />
                    <h2 className="text-xl font-semibold text-gray-800">L·ªãch h·∫πn s·∫Øp t·ªõi</h2>
                  </div>
                  {appointments.length > 0 && (
                    <span className="bg-[#3B9AB8] text-white text-sm px-3 py-1 rounded-full">
                      {appointments.length} l·ªãch h·∫πn
                    </span>
                  )}
                </div>
              </div>
              <div className="p-6">
                {appointments.length === 0 ? (
                  <div className="text-center py-8">
                    <FaCalendarAlt className="text-gray-300 text-4xl mx-auto mb-4" />
                    <p className="text-gray-500">Kh√¥ng c√≥ l·ªãch h·∫πn n√†o s·∫Øp t·ªõi</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {appointments.map((appointment, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors">
                        <div className="flex items-start gap-4">
                          <div className="w-10 h-10 bg-[#3B9AB8]/20 rounded-full flex items-center justify-center flex-shrink-0">
                            <FaCalendarAlt className="text-[#3B9AB8]" />
                          </div>
                          <div className="flex-1">
                            <h3 className="font-medium text-gray-800 mb-1">
                              {appointment.reason || appointment.title || 'Cu·ªôc h·∫πn kh√°m'}
                            </h3>
                            <div className="flex items-center gap-2 text-sm text-gray-600 mb-1">
                              <FaClock />
                              <span>{formatDate(appointment.appointmentDate || appointment.dateTime)}</span>
                            </div>
                            {appointment.doctorName && (
                              <p className="text-sm text-gray-600">B√°c sƒ©: {appointment.doctorName}</p>
                            )}
                            {appointment.location && (
                              <p className="text-sm text-gray-600">ƒê·ªãa ƒëi·ªÉm: {appointment.location}</p>
                            )}
                            {appointment.notes && (
                              <p className="text-sm text-gray-600 mt-1">Ghi ch√∫: {appointment.notes}</p>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
